using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Tampa.Interfaces;
using System.Xml;
using Tampa.InterfaceCompiler.Java;

namespace Tampa.InterfaceCompiler
{
    class JavaCompiler: ICompiler
    {
        #region ICompiler Members

        public string Compile(XmlDocument canvasXml, string className)
        {
            _buffer = new StringBuilder();

            GenerateImports(canvasXml);

            WriteClassStart(className);

            XmlNode canvasNode = canvasXml.SelectSingleNode("/Canvas");

            CanvasWriter writer = new CanvasWriter(canvasNode, 1);

            StringBuilder memberMethods = new StringBuilder();
            StringBuilder memberVariables = new StringBuilder();
            writer.Write(memberMethods, memberVariables);

            _buffer.Append(memberMethods.ToString());

            WriteMain();

            _buffer.Append(memberVariables.ToString());
            WriteEnd(0);

            return _buffer.ToString();
        }

        private void WriteMain()
        {
            Write("public static void main(String[] args) {", 1);
            Write("JFrame frame = GetCanvas();", 2); // GetCanvas is the method generated by the CanvasWriter
            Write("frame.setVisible(true);", 2);
            WriteEnd(1);
        }

        void Write(string line) { Write(line, 0); }

        void Write(string line, int depth)
        {
            for (int i = 0; i < depth; i++)
            {
                _buffer.Append("    ");
            }
            _buffer.AppendLine(line);
        }

        private void WriteClassStart(string className)
        {
            Write("public class " + className);
            Write("{");
        }

        private void WriteEnd(int depth)
        {
            Write("}", depth);
        }

        private void GenerateImports(XmlDocument canvasXml)
        {
            Write("package start;");
            Write("import javax.swing.*;");
            Write("import java.awt.*;");
            Write(String.Empty);
        }

        private StringBuilder _buffer;
        #endregion
    }
}
